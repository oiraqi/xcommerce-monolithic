@startuml SequenceDiagram
actor User as User
participant "Rich UI\nREST-capable\nClient" as Client
participant "REST\nController" as Controller
participant Service as Service
participant Repository_i as Rep_i
participant Repository_j as Rep_j
collections Entities_i as Ent_i
collections Entities_j as Ent_j
database Database as DB
User -> Client : uses
Client -> Controller : remotely calls
Controller -> Service : calls
Service -> Rep_i : calls
Rep_i -> Ent_i : manages
Ent_i <--> DB : mapped to
Rep_i --> Service : returns
Service -> Rep_j : calls
Rep_j -> Ent_j : manages
Ent_j <--> DB : mapped to
Rep_j --> Service : returns
Service --> Controller : returns
Controller --> Client : remotely returns
Client --> User : renders UI
@enduml